class toyotaCar{

    constructor(brand,milage){
        console.log("Creating new object");
        this.brand = brand;
        this.milage = milage;
    }

    start(){
        console.log("start");
    }

    stop(){
        console.log("stop");
    }
}

let fortuner = new toyotaCar("fortuner",12);
console.log(fortuner);

//About Super keyword
class Person{
    constructor(name){
        this.species = "homo sapiens";
        this.name = name;
    }

    eat(){
        console.log("eat");
    }
}

class Engineer extends Person{
    constructor(name){
        super(name); // to invoke parent class constructor.
    }

    work(){
        super.eat();
        console.log("solve problem, build things..");
    }
}

let engObj = new Engineer("Nachiket");

//Async-Await, Callbacks, Promises

//-- callback Hell

function getData(dataId,getNextData){
    setTimeout(() => {
        console.log("data",dataId);
        if(getNextData){
            getNextData();
        }
    },2000);
}

//callback Hell making 
getData(1,()=>{
    getData(2, ()=>{
    getData(3, ()=>{
    getData(4);
});
});
})

//Promises
const getPromise = ()=> {
    return new Promise((resolve,reject) => {
        console.log("I am a promise");
        //resolve("Success");
        reject("Error has occured!");
    });
};

let promise = getPromise();

promise.then((res)  => {
    console.log("Promise Fullfilled:", res);
});

promise.catch((err) => {
    console.log("Rejected",err);
});

//Promise .then & .catch

function asyncFunc1 (){
    return new Promise((resolve,reject) => {
        setTimeout(()=>{
            resolve("Success1");
            console.log("Data1");
        },4000);
    });
}

function asyncFunc2 (){
    return new Promise((resolve,reject) => {
        setTimeout(()=>{
            resolve("Success2");
            console.log("Data2");
        },4000);
    });
}

console.log("fetching data1");
asyncFunc1().then((res) => {
    console.log(res);
    console.log("fetching data2");
    asyncFunc2().then((res) => {
    console.log(res);
    });
});

//Chaining 

function asyncFunc1 (){
    return new Promise((resolve,reject) => {
        setTimeout(()=>{
            resolve("Success1");
            console.log("Data1");
        },4000);
    });
}

function asyncFunc2 (){
    return new Promise((resolve,reject) => {
        setTimeout(()=>{
            resolve("Success2");
            console.log("Data2");
        },4000);
    });
}

console.log("fetching data1");
asyncFunc1().then((res) => {
    console.log(res);
    console.log("fetching data2");
    asyncFunc2().then((res) => {
    console.log(res);
    });
});

//--- ASYNC - AWAIT ---

function getData(dataId){
    return new Promise((resolve,reject) => {
        setTimeout(() => {
            console.log("Data",dataId);
            resolve("Success");
        },2000);
    });
}

//Async-Await

async function getAllData(){
    console.log("getting Data1...");
    await getData(1);
    console.log("getting Data2...");
    await getData(2);
    console.log("getting Data3...");
    await getData(3);
}

=====================================================
//Example of Async and Await
//JS File

const URL = "https://cat-fact.herokuapp.com/facts";
const factPara = document.querySelector("#fact");
const btn = document.querySelector("#btn");

const getFacts = async () => 
{
    console.log("Getting Response.....");
    let response = await fetch(URL);
    console.log(response);
    let parsedData = await response.json();
    console.log(parsedData[1].text);
    factPara.innerText = parsedData[1].text;
};

btn.addEventListener("click", getFacts);
=====================================================
//HTML File

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <button id="btn">Get a Fact</button>
    <p id="fact"></p>
    <script src="app.js"></script>
</body>
</html>